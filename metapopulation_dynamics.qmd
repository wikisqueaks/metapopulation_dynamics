---
title: "Simulation of Patch Metapopulation Dynamics" author: "Kyle Taylor"
format: html
---
# Purpose The purpose of this document is to develop an R version of the
metapopulation simulator in Lab 3 of the university course BIOL 431 -
*Population Ecology* taught by Dr. Mark Boyce. # Dependencies
```{r}
library(tidyverse)
version
set.seed(789) # set the random seed for reproducible results for students.
```
# The Landscape Matrix Let any landscape matrix $M$ be initially represented by
an $N\times3$ tibble with the grid coordinate variables $x$ and $y$, and a third
Bernoulli variable (0,1), called `present`. We will create a function that
allows the user to specify the $x$ and $y$ dimensions of the landscape matrix,
and randomly assigns a value of 0 or 1 from a distribution with an expected
value of $f_e=\frac{p_{colonization}}{p_{colonization}+p_{extinction}}$:

```{r}
create_landscape <- function(x = 5, y = 5, p_occupied = 0.5) {
  return(
    tibble(crossing(x = seq(1 : x), y = seq(1 : y)),
                      t0 = ifelse(runif(x * y, 0, 1) < p_occupied, 1, 0))
    )
}
```
## Creating a Visual of the Landscape at Time t
```{r}
draw_landscape <- function(landscape) {
  landscape |>
    ggplot(aes(x=x, y=y, fill=as.factor(t0))) +
    geom_tile(alpha = 0.7) +
    scale_fill_manual(values = c("tan","darkgreen"),
                      labels = c("absent", "present")) +
    theme_classic() +
    labs(y="Y", x="X", fill="") +
    theme(aspect.ratio = 1)
}
```
# Simulate by Iteration of the Landscape
```{r}
simulate <- function(landscape, iterations = 50, p_colonization = 0.5, p_extirpation = 0.5) {
  sim <- landscape
  draw_landscape(sim)
  for (i in 1:iterations) {
    next_t <- sim |>
      select(last_col()) |>
      mutate(!!paste0("t",i) := ifelse(sim[[ncol(sim)]] == 0,
                                 ifelse(runif(length(sim[[ncol(sim)]]), 0, 1) < p_colonization, 1, 0),
                                 ifelse(runif(length(sim[[ncol(sim)]]), 0, 1) < p_extirpation, 0, 1))) |>
      select(last_col())
    sim <- add_column(sim, next_t)
  }
return(sim)
}
```
# Create new vector of landscape proportions from the simulation
```{r}
create_proportions <- function(simulation) {
  patches <- simulation |>
    select(contains("t"))
  return(tibble(t = 0:(ncol(simulation)-3),
                p = colMeans(patches)))
}
```